# Inline comments are not supported!

################################################################################
#                                  Data Output                                 #
################################################################################
# file to which generator outputs generated event data
outfile output

# Files to which functions generated using gaussians are output. 
# File for gaussians in their raw form (xpos stdev weight). Additional files may
# be generated when generating functions with gaussians - these files will have
# "_sum" and "_contrib" appended to the end of the value provided below.
function_outfile random_function

# File for gaussians generated from event data. Additional files may be generated
# depending on the switches provided to the program. These files will have "_sum"
# and "_contrib" appended to the value provided below.
stream_function_outfile gauss_stream_function

# this will be appended to the output file for each separate stream. The stream
# number will be added at the end.
stream_ext _stream_

# Estimators output data to this file if no output file is specified for the
# estimator being used
est_outfile est_out

# Individual output files for specific estimators.
# ols_est_output ols_est_out
# iwls_est_outfile iwls_est_out
# pc_est_outfile pc_est_out
# Used to determine the granularity of data in output files. With a step of 1,
# data in interval [0,5] is gathered at 0, 1, 2, 3, 4 and 5 along the axis.
output_step 1.000000

# base_est_outfile base_est_out
# File to output gaussian estimate data to.
gauss_est_outfile gauss_est_out

# define the verbosity of output to data files.
# 0 output only event data for each run
# 1 output event times and lambda values for each run
# 2 output event time and lambda values for each run, as well as midpoints and
# bin counts, to a single file
# 3 output the above, but also save a file with only event data in it (all data
# is saved as {filename}_ad, events as {filename}_ev)
verbosity 3

################################################################################
#                                   Data Input                                 #
################################################################################
# Default input file used for estimation
infile output_stream_0.dat

################################################################################
#                             Generation Parameters                            #
################################################################################
# The time at which to start generation.
start_time 0.000000

# The number of streams to generate.
nstreams 1

# The delay between zero and each stream. If the delay is greater than zero, then
# when generating events, instead of using lambda(t) to generate, lambda(t+delta)
# is used.
timedelta 0.0,-10.0,20.0

# The lambda value to use when generating events. This value is used during thinning
# to calculate whether an event should be kept. lambda must be > lambda(t) for all
# times start_time <= k <= start_time + interval_time 
lambda 1000

# The length of the interval in which events should be generated.
interval_time 100.000000

# The seed to use when generating events. Currently unused.
seed 0

# expression parameters
# The equation must contain the variable 't'. The value of the variable will be set by
# the program. Do not set it here.
expression a-(b*sin(alpha*t))
a 10
b 5
alpha 0.1000000000

################################################################################
#                          Gaussian Function Generator                         #
################################################################################
# Standard deviation to apply to generated gaussians
gauss_stdev 10.000000

# Specifies whether to disregard the standard deviation specified above and
# instead calculate the standard deviation to apply based on the function
# \alpha * \Delta t. This allows the standard deviation to be specified as
# a function of the step between the kernels. A yes value will use the above
# standard deviation.
simple_stdev yes

# Specifies the alpha parameter which is used to calculate the standard deviation of
# kernels when generating functions from gaussians. Used when simple_stdev is set to no.
# The value of this parameter is multiplied with the gauss_generation_step parameter
# to calculate the standard deviation.
stdev_alpha 3.000000

# Specifies the distance on the x-axis between each gaussian when generating.
gauss_generation_step 10.000000

# Specifies the distance between points at which the gaussian is sampled when summing
# or outputting data. A high value for this will result in fast computation but loss
# of detail, and a low value will give more granularity but summing gaussians will take longer. 
gauss_resolution 0.500000

# Multiplier to apply to weights of gaussians when generating random functions.
# The standard gaussian weight is ~ N(0,1). The standard functions have on average
# vary between -5 and 5, which may not be appropriate. Multiplying the weight
# values gives a greater range of values but preserves the shape of the function.
gauss_func_multiplier 5.000000

################################################################################
#                              Estimator Parameters                            #
################################################################################
# specifies the type of estimator to use. Options are ols, iwls, piecewise, baseline
est_type base

# Specify the time from which to start the estimation. In general, this should be
# the same as the start_time given above, but it can be used if you only need
# to estimate a certain portion of your data.
est_start_time 0.000000

# The length of the interval that you want to estimate. The interval estimated
# will be [est_start_time, est_start_time + est_interval_time].
est_interval_time 100.000000

################################################################################
#                                 ols parameters                               #
################################################################################
ols_subintervals 5

################################################################################
#                           IWLS Estimator Parameters                          #
################################################################################
iwls_iterations 3
iwls_subintervals 5

################################################################################
#                         Piecewise Estimator Parameters                       #
################################################################################
# Number of times to iterate the IWLS estimator. Recommended value is between 2 and 5.
pc_iwls_iterations 3

# Number of subintervals to use for the IWLS estimator. The photon stream data will be
# put into this many bins and the estimate will run on that.
pc_iwls_subintervals 5

# Maximum amount to extend the lines estimated for each subinterval. Longer lines will
# be more likely to be rejected if the data varies a lot. If the first attempt fails,
# further attempts will be made with fractional values of the original.
pc_max_extension 15.000000

# The maximum number of breakpoints used by the piecewise estimate. The estimator will
# use at most this number of lines to estimate the underlying function. If extensions
# succeed or the data is quite linear, fewer subintervals will be required to make a
# good estimate, so the actual number of breakpoints in the estimate may be lower.
pc_max_breakpoints 10

# Proportion of the interval time that the minimum possible subinterval length should
# be. Very short subintervals often result in very bad estimates, especially if the
# data has large variations.
pc_min_interval_proportion 0.010000

# Threshold at which to reject an extension attempt. This threshold limits the value
# of the probability mass function calculated at each point on the extended line,
# checking how likely is it that the point is actually part of the data set. A lower
# value means that extension will be continued even if the probability is very low.
pc_pmf_threshold 0.050000

# A different threshold for summation of probability mass functions. Used when summing
# the probability mass functions at each point.
pc_pmf_sum_threshold 0.850000

################################################################################
#                         Baseline Estimator Parameters                        #
################################################################################
base_iwls_iterations 3
base_iwls_subintervals 5
base_max_extension 15.000000
base_max_breakpoints 10
base_min_interval_proportion 0.010000
base_pmf_threshold 0.050000
base_pmf_sum_threshold 0.850000

################################################################################
#                         Gaussian Estimator Parameters                        #
################################################################################
# Standard deviation to apply to gaussian kernels used to estimate functions
# Changing this value will change the normalisation constant required to get
# the correct function estimate.
gauss_est_stdev 5.000000

# Specify resolution of kernels used to estimate gaussians. A small value will
# give higher precision but take longer
gauss_est_resolution 0.300000

################################################################################
#                        Time Delta Estimator Parameters                       #
################################################################################
# Whether to estimate the time delay. If this is set to no, the timedelta will be
# read from the parameter file and used to combine functions if multiple streams
# are being estimated.
estimate_delta yes

# Method to use to estimate the time delay. Set to either pdf or area. The pdf
# method uses the probability mass function to calculate likelihood of two
# streams sharing the same underlying functions, given the bin counts from the
# event stream. The time delay is the point at which the sum of the probability
# mass functions across the whole space is highest. The area method is
# simpler, estimating the delay based on the area between the curves of two
# functions. The point at which the area is smallest is most likely the actual
# time delay.
delta_est_method area

# If this is set to yes, the time delta estimation will be performed hierarchically.
# Initially, a single pass over the shifts will be done, with the coarse step provided,
# and checking between -delta_est_max_delta and delta_est_max_delta. After an initial
# estimate is found, a second pass, using the fine step will be done, within the range
# +/- delta_est_fine_range.
delta_est_hierarchical yes

# This parameter defines the step by which the guess at the value of delta increases.
# The value of delta starts at a negative value and moves towards a positive value
# in steps of this value. A low value will provide more granularity on data, but it
# will take longer to find an estimate.
delta_est_step_coarse 2.000000

# Defines the step by which delta increases when improving the original estimate.
delta_est_step_fine 0.200000

# Defines the +/- range in which the second pass over the shift data will be performed.
# If the first pass produces a shift of 2, then if this parameter has a value of 5,
# the second pass will go from -3 to 7 using the delta_est_step_fine step.
delta_est_fine_range 3.000000

# The estimator will check delta values of between + and - this value. A lower value
# will mean that the estimation is quicker, but may result in the true delta not being
# found if it is not within the range provided. The program starts at the negative
# of the value and iterates, increasing by delta_est_step until it reaches the positive.
delta_est_max_delta 40.000000

################################################################################
#                                  Area Method                                 #
################################################################################
# Point at which to start approximating the area between functions.
delta_est_area_start 0.000000

# Length of the interval to use when approximating area between functions.
delta_est_area_interval 100.000000

# This parameter is used to define the step taken when finding estimates. In the
# case of the area method, a sample of the area is taken at uniform intervals
# according to this value. A smaller value may provide more accurate
# estimates, but the calculation will take longer.
delta_est_area_resolution 5.000000

################################################################################
#                                   PMF Method                                 #
################################################################################
# Defines the point at which to start combining functions in the pmf estimator.
# This should usually be the same as the interval specified in the generator
# parameters if you are using a generated function. It may also be useful for
# getting better estimates on functions that vary greatly at some points,
# and are smooth at others, removing the large variation from consideration in
# the time delta estimation and perhaps improving the result.
delta_est_combine_start 0.000000

# Defines the length of the interval to use when combining two functions during
# the pmf delta estimation.
delta_est_combine_interval 100.000000

# This parameter is used to define the step taken when finding estimates.
# In the case of the pmf method, the points at which the value of the pmf
# is calculated depend on this value. A smaller value may provide more
# accurate estimates, but the calculation will take longer.
delta_est_pmf_resolution 1.000000

# Defines the number of bins used to split the interval. If the bin length
# resulting from this value differs from the length of time which each lambda
# represents, then a normalisation constant is required to find the original
# function at its original magnitude. If lambda represents arrivals per second,
# then a bin length of 1 second is ideal because then each bin can be represented
# with a single value of lambda. Otherwise, it is necessary to sum the lambda
# values in the bin interval to see whether the number of events received
# is close to the number expected given the value of lambda.
delta_est_num_bins 100

################################################################################
#                             Normaliser Parameters                            #
################################################################################
# Defines the initial value checked when finding the normalisation constant,
# used to normalise the function so that it is as close to the original function
# as possible. This is necessary when using the gaussian estimation method, because
# the value of the function at each point depends on the number of gaussians, as
# well as on their standard deviation.
normaliser_est_initial 1.000000

# Maximum value to check when finding the normalisation constant.
normaliser_est_max 20.000000

# Value by which to increase the checked value of the normaliser in each iteration.
normaliser_est_step 1.000000

# Number of bins into which to split the interval being estimated into to find the
# normaliser. Generally, this value should be equal to the length of the interval
# being estimated divided by the time period for which the lambda value applies.
# For example, if your lambda represents the number of events per second, and you
# have an interval time of 100 seconds, you should use 100 subintervals in order
# for the number of events counted in each bin to be of a similar magnitude to the
# lambda value that the function estimates should produce if you want to get back
# a function estimate that is on the same scale as the generating function. This
# applies in particular to estimates with gaussians, where the standard deviation
# of the gaussians being used affects the height of the estimated function at each
# point.
normaliser_est_subintervals 100
