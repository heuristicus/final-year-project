2013-02-14  Michal Staniaszek  <mxs968@cs.bham.ac.uk>

	* estimate_delta.c: Fixed issues where baseline pmf calculations were not being
	done correctly due to issues with math functions.

	* math_util.c: When summing pmfs, points at which lambda is zero caused -nan
	to be returned, even if there was only a single point at which there was a zero.
	This led to bad behaviour, so the calculation is now done with a very small lambda
	value which should be better than ignoring those values entirely.
	Array interval summing now sums values in the right-closed interval (start,end]

2013-02-13  Michal Staniaszek  <mxs968@cs.bham.ac.uk>

	* tests: Fixed some tests which were broken by minor modifications to functions.

	* generator.c: Generation stops if the time exceeds the end time when the
	homogeneous lambda value is added to the base time. Would previously have
	a small number of events that exceeded the threshold.

	* estimate_delta.c: Implemented a pmf estimator which sums the pmfs from
	both streams being compared. Previous version used only one of the streams
	to check whether the combined function was representative of the bin counts,
	which was sub-optimal. pmf estimation now gives good results. Area estimator
	uses normalised start and end points, between which both functions have data
	at all of the delays that are being attempted. The same applies for the pmf
	estimator as well.

	* math_util.c: Fixed array interval summing issue which was causing pmf
	delay estimator to work sub-optimally.

2013-02-12  Michal Staniaszek  <mxs968@cs.bham.ac.uk>

	* general_util.c, defparams.h: Added parameters for delta estimation to
	default file. Added comments to some existing parameters. More headings
	in the file, as well as some more separation for delta estimation parameters.
	Each of the area and pmf methods has its own start and interval times and
	resolutions. Also added separate start and interval times for estimation and
	generation. Not sure if all places where this is used have been found.

	* estimate_delta.c: Functions now use parameters from parameter file.

2013-02-11  Michal Staniaszek  <mxs968@cs.bham.ac.uk>

	* estimate_delta.c: More progress on the pmf estimator. Looping over the
	different delay values again, as the underlying logic seems to work reasonably
	well. Need to work out how to get the pmfs to come out correctly for different
	interval lengths, as the estimates are not as good as expected. Calculating only
	based on the interval in which functions overlaps seems like a good idea, but
	if this is to be implemented it needs to be normalised somehow, which is
	probably quite difficult. Delays with shorter overlaps always come out with the
	highest pmf because there are fewer elements to sum. Maybe incur some fixed
	penalty for points at which the combined function is zero? Perhaps using more
	than 10 intervals would work better.

	* combinefunctions.c: Expected structure of time delay matches the current
	scheme. Minor fix where the gauss vector function would not find the correct
	maximum delay value if it was in the last array position.

	* launcher.c: Fixed time delay arrays to match the scheme. Decided to use
	a value to represent the delay of each individual stream rather than delays
	between streams. The delays will still be relative to the first function, but
	there will be n delay values rather than n-1 as was the case previously. This
	makes things more compatible with the generator setup. The two multi-estimate
	functions duplicate a lot of code. Should put them together to make things
	cleaner.

2013-02-10  Michal Staniaszek  <mxs968@cs.bham.ac.uk>

	* math_util.c: Function for finding the sum of the log of probability mass
	functions, which takes a normalisation constant. Takes an array of counts
	and an array of lambda values and finds the pmf for each, summing as it goes.
	The normalisation constant ensures that the lambda values correspond to the
	bin counts so that a true value can be found. Function for summing values
	in a specified interval given time values and data values. Function for
	summing gaussians at the specified points by passing an array of desired
	sample points. Function to find the largest value in the array, positive or
	negative.

	* general_util.c: Functions for initialising array structs with specified
	lengths, function for finding a series of values from an est_arr struct.

	* estimator_delta.c: Prototype of pmf estimator improved and almost working.
	Function combination needs to be completed to a satisfactory level before it
	can be finished. Implemented a function to find the normalisation constant
	required to get gaussians to correspond to differing numbers of bins when
	doing the delta estimation. The normalisation constant required depends on the
	standard deviation of the gaussians used to estimate the function.

	* combinefunction.c: Fixed function combination. Required an array containing
	a delay for the first function as well, but since that is taken as a base with
	no delay, it is unneeded. The function now takes an array containing delays
	between the base and subsequent functions. This will lead to the function
	combination breaking when the time delta is read from the parameter file, as
	there the base time is specified as zero. Changing the value in the parameter
	file also affects the generator. Decide which one is better and fix this!

2013-02-09  Michal Staniaszek  <mxs968@cs.bham.ac.uk>

	* estimator_delta.c: Untested prototype of the pmf estimator implemented.

	* launcher.c: Function combination for gaussians added to the multiple estimate
	process. pmf method now able to be used.

	* general_util.c: Function for initialising double_multi_arr structs so that
	code is cleaner.

	* combinefunction.c: Function for combining gaussians. Takes a set of gauss
	vectors and finds their average. This should probably be done on non-normalised
	gaussians which can be normalised when being output to file, or once the
	normalisation constant has been estimated.

2013-02-08  Michal Staniaszek  <mxs968@cs.bham.ac.uk>

	* launcher.c: Estimates delta according to parameters in the paramfile.
	Perhaps a good idea to add another switch to the launcher to specify whether
	or not to estimate it? Seems a little different to the main estimators, so
	it's probably fine to keep it in the parameter file.

	* combinefunction.c: Moved functions for finding the value of an estimate
	at a given point to general_util as it is useful in other places as well.

	* general_util.c: Parameters for time delta estimation added to
	default parameter file. estimate_timedelta specifies whether to
	estimate delta or just take it from the paramfile. timedelta_est_method
	specifies which method of estimation to use. Parameters for specifying
	the step, resolution and max delta for delta estimation. Modified some
	of the default parameters for the baseline estimator so it performs
	better by default.

	* estimator_delta.c: Function for estimating the time delta
	based on the area between two curves. Works for data from both the
	gaussian and baseline estimators. Single function for both which requires
	the conversion to a void pointer. This is so that there is less code
	duplication - there is essentially only one function that has to change
	in each of the sub-functions.

2013-02-03  Michal Staniaszek  <mxs968@cs.bham.ac.uk>

	* estimator_baseline.c: Discovered crashes, but not sure of the cause.
	Mostly related to estimation of functions generated by the random
	generator, but this implies that there is something to do with the
	shape of the function that causes the crashes.

	* math_util.c: Functions to create gaussian vectors take a multiplier
	which modifies the weights of gaussians. Standard weights are ~ N(0,1).
	This allows for functions to have larger ranges than just -5 to 5 or so.

	* estimator_gaussian.c: Reverted to using the standard system in use for
	everything else rather than kernel density.

	* printf: Some print statements depend on the VERBOSE flag being defined.
	can do this at compile time by passing -DVERBOSE to make.

	* output: Modifications to output filenames for the various generators
	and estimators.

2013-02-02  Michal Staniaszek  <mxs968@cs.bham.ac.uk>

	* launcher.h: Updated help info for switches, -R replaced with -t, specify
	output type.

	* general_util.c: Function for freeing memory allocated for
	double_multi_arr structs. Default parameter file has more files to output
	gaussian data to. Separate ones for raw data and that generated from
	an event file.

	* math_util.c: GSL random number generator is deallocated when
	the program exits using an atexit function. Function for shifting
	a gauss transform so that all points are non-negative

	* generator.c: Generation of event streams from gaussians. Generation
	of functions simplified to a single function. Output of contribution
	of gaussians if the -t 2 switch is used.

	* launcher.c: Generation of event streams from gaussians possible
	by passing the -f rand switch to the launcher. If no parameter is
	provided then the default muparser version is used which takes the
	function in the paramfile. Function generation is done using the
	-r switch. Adding -R outputs gaussians in their raw forms, and
	including an input file with one-dimensional data has the program
	centre a gaussian on each point.

2013-02-01  Michal Staniaszek  <mxs968@cs.bham.ac.uk>

	* launcher.c: Added struct to make adding switches easier. Split
	multi-estimate function into gaussian and other estimators since
	return types are different.

	* generator.c: Random functions can now be generated with the
	-r switch. Still untested, but appears to work as intended. Another
	function for gaussians also implemented, but not sure of what
	functionality it should have. One function is required to generate
	random functions for experimenting on, the other is used to generate
	gaussians from event data to use in gaussian estimates?

	* file_util.c: Function for outputting double_multi_arr struct.

	* math_util.c: Fixed cause of crash on fclose when calling the
	gauss_transform function - data was being written to un-malloced
	locations. Changed return type of gaussian transform to struct to
	make it easier to work with. Gaussian transform needs some kind of
	normalisation parameter so that it outputs data int the correct range
	for the function it is being used to estimate. Attempted to implement
	kernel density estimation, but still unsure of how to proceed.

	* estimator.c: New file can be run by calling the estimator with the
	-a gauss switch. Multiple stream estimates are also possible.

	* estimator_gaussian.c: New estimator which uses kernel density
	to estimate functions. Prototype functions implemented.

	* makefile.am: Dependencies for new file added.

	* defparams.h: Added gaussian estimation and generation parameters.

	* general_util.c: Added writing of gaussian parameters to default
	paramfile.

	* params.txt: Gaussian estimation and generation parameters split.

2013-01-31  Michal Staniaszek  <mxs968@cs.bham.ac.uk>

	* file_util.c: Extremely weird bug where crash occurs on fclose discovered.
	Not sure how to solve yet. Functions to read and write gaussians with
	mean, stdev and weight representation, along with tests.

	* struct.h: Header file for structs to prevent interdependencies causing
	compilation issues.

	* defparams.h: Default gaussian parameters

	* general_util.c: Gaussian parameters added to default paramfile generation.
	Functions for printing and freeing gaussian vectors.

	* params.txt: Added gaussian parameters


2013-01-30  Michal Staniaszek  <mxs968@cs.bham.ac.uk>

	* check_math_util.c: tests for the new functions

	* math_util.c: Function for generating a vector initialised with the same
	values, finding the minimum value in an array, adding a constant to an array.

	* launcher.c: Can generate gaussians from the launcher into output files.

	* generator.c: Generation functions for gaussians. Output data to files.

	* general_util.c: Parameters for gaussians added to default file generation.

	* file_util.c: Gauss transform output can be shifted along the y axis.

2013-01-29  Michal Staniaszek  <mxs968@cs.bham.ac.uk>

	* file_util.c: Wondering whether to allow parameters without
	values specified. Makes having to specify loads of parameters
	in the experiment paramfile unnecessary if you just want to run
	experiments on one part of the system.

	* experimenter.c: Function to parse parameters from a string of
	comma separated values. If the string contains a range indicator
	(...), then it will revert to the function to calculate the range.
	Experimenter structure changed. Requires parameters to be defined
	for all the parts of the system you want to experiment with. Checks
	whether these parameters exist in the paramfile. Still a work in
	progress.

	* general_util.c: Function to check whether parameters in a string
	array are present in a paramlist.

2013-01-28  Michal Staniaszek  <mxs968@cs.bham.ac.uk>

	* general_util.c: Modified split_string function and its tests.

	* experimenter.c: Completed range parsing functions, with tests.
	Experimenter now takes two parameter files to read - one to read
	default parameters, and one for its own use. Checks that some required
	parameters are present.

	* exp_param.txt: Added some parameters that make sense to use.

	* check_file_util.c: Test for create file function.

	* file_util.c: Added function for creating files within directories.
	Fixed crash when parameter in paramfile does not have a value.

2013-01-27  Michal Staniaszek  <mxs968@cs.bham.ac.uk>

	* math_util.c: Error checking on parameters for some gaussian functions

	* check_math_util.c: Added tests for gaussian-related code

	* combinefunction.c: Basic error checking added.

	* tests: Tests for combining functions.

2013-01-26  Michal Staniaszek  <mxs968@cs.bham.ac.uk>

	* GMP: Removed use of GMP in math library - necessary functionality
	available in GSL.

	* estimator_piecewise.c: Replaced custom probability mass function with
	the function from the GSL.

	* math_util.h: Fixed bug in gaussian transform calculation, split some
	functions to get more control over what goes on.

	* file_util.h: Added functions for outputting gaussians and discrete
	Gaussian transforms to file. Moved includes into header file.
	Function for writing one of the new structs to file.

	* launcher.c: multi-estimate data should go to specified output file.

	* general_util.c: Parameter for step used when going through data added

	* general_util.h: Added some structs to make array length storage easier.

	* combinefunction.c: Function used to combine functions now works as it should,
	returning an array containing data to use.

2013-01-25  Michal Staniaszek  <mxs968@cs.bham.ac.uk>

	* generator.c: Changed random number function usage to echo below
	changes.

	* configure.ac: Added checks for GSL library

	* math_util.c: Switched to using GSL to generate random numbers.
	Implemented discrete Gaussian transform with some structs to store
	Gaussians in a clean way. Various functions for initialising vectors
	of gaussians.

2013-01-23  Michal Staniaszek  <mxs968@cs.bham.ac.uk>

	* launcher.c: Updated to reflect changes to functions in combinefunction.c

	* combinefunction.c: Implemented a basic function combinator. Current implementation
	is rough and outputs to a file specified within the code.

2013-01-20  Michal Staniaszek  <mxs968@cs.bham.ac.uk>

	* launcher.c: Estimation of multiple streams at once by the launcher. Updated
	switches to allow for this. Some commenting and more checking for null values.

	* combinefunction.c: Function skeletons for combining functions.

	* makefile.am: Added new file and dependencies generated by it to launcher.

	* scripts: Removed unused plotting scripts. Obsoleted by plotmaster.

	* estimators: All now return an est_arr rather than some returning est_data.
	Easier to integrate with the launcher and other parts of the system.

	* memory: Fixed some leaks caused by swath of changes, and some old ones.

2013-01-19  Michal Staniaszek  <mxs968@cs.bham.ac.uk>

	* headers: Moved headers around in some files in src. Launcher strings
	moved into header file.

	* src/makefile.am: No longer includes muparser. Correctly added by
	configure.ac.

	* configure.ac: Checks for correct version of muparser.

	* plotmaster.sh: Plots data from the new plot

	* plots: Gnuplot code for plotting two estimates added


2013-01-13  Michal Staniaszek  <mxs968@cs.bham.ac.uk>

	* paramlist.c: Added functions for setting the value of parameters in the list.

	* file_util.c: Modified file generator to take parameters.

	* generator.c: Added helper function to extract parameters from a parameter
	file.

	* estimator_piecewise.c: Fixed bug with estimation data from the first
	subinterval not being output to file. Minimum length of interval now in
	place for piecewise estimate. Affects the baseline estimator as well.

	* defparams.h: New header file containing default parameters for estimators
	and generator.

	* general_util.c: Added a function for generating a default parameter file,
	moved in function for checking parameters in a list.

2013-01-11  Michal Staniaszek  <mxs968@cs.bham.ac.uk>

	* estimator_piecewise.c: Removed preprocessor variables and modified functions
	to take additional parameters instead.

	* estimators: Added a helper function to the estimators so that you do not
	have to call them with all the parameters specified if it is not necessary.
	You can now pass in a parameter list containing the relevant parameters,
	which will be extracted and passed into the function.

	* tests/Makefile.am: Tests can now be compiled using `make check`

	* tests/check_estimator.c: Added a basic test for estimator.c

	* tests/testmain.c: Added estimator test suite.

	* AUTHORS: Added name

	* ChangeLog: Put some actual stuff in it.

	* NEWS: Very brief information about releases.

	* README: Added basic information.
